<?php

namespace App\Repository\UserManagement;

use App\Entity\UserManagement\Tracking;
use Doctrine\Bundle\DoctrineBundle\Repository\ServiceEntityRepository;
use Doctrine\Persistence\ManagerRegistry;

/**
 * TrackingRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class TrackingRepository extends ServiceEntityRepository
{
    /**
     * TrackingRepository constructor.
     * @param ManagerRegistry $registry
     */
    public function __construct(ManagerRegistry $registry)
    {
        parent::__construct($registry, Tracking::class);
    }

    /**
     * @return mixed
     * @throws \Doctrine\ORM\NonUniqueResultException
     */
    public function getTotal()
    {
        $aResultTotal = $this->getEntityManager()
            ->createQuery('SELECT COUNT(T) FROM App\Entity\UserManagement\Tracking T')
            ->setMaxResults(1)
            ->getSingleScalarResult();

        return $aResultTotal;
    }

    /**
     * @param int $page
     * @param int $maxperpage
     * @return mixed|null
     */
    public function findAllValid($page = 1, $maxperpage = 8)
    {
        $query = $this->getEntityManager()
            ->createQuery(
                'SELECT T FROM App\Entity\UserManagement\Tracking T JOIN T.user u ORDER BY T.created DESC'
            )
            ->setFirstResult(($page - 1) * $maxperpage)
            ->setMaxResults($maxperpage);

        try {
            $entities = $query->getResult();
        } catch (\Doctrine\ORM\NoResultException $e) {
            $entities = null;
        }

        return $entities;
    }

    /**
     * @param int $page
     * @param int $maxperpage
     * @return mixed|null
     */
    public function findAllAuthenification($page = 1, $maxperpage = 8)
    {
        $query = $this->getEntityManager()
            ->createQuery(
                'SELECT T FROM App\Entity\UserManagement\Tracking T ORDER BY T.created DESC'
            )
            ->setFirstResult(($page - 1) * $maxperpage)
            ->setMaxResults($maxperpage);

        try {
            $entities = $query->getResult();
        } catch (\Doctrine\ORM\NoResultException $e) {
            $entities = null;
        }

        return $entities;
    }

    /**
     * @return array|\Generator
     */
    public function findAll()
    {
        $queryBuilder = $this->createQueryBuilder('t')
            ->select('t')
            ->orderBy('t.created');

        $limit = 1000;
        $offset = 0;

        while (true) {
            $queryBuilder->setFirstResult($offset);
            $queryBuilder->setMaxResults($limit);

            $interactions = $queryBuilder->getQuery()->getResult();

            if (count($interactions) === 0) {
                break;
            }

            foreach ($interactions as $interaction) {
                yield $interaction;
                $this->_em->detach($interaction);
            }

            $offset += $limit;
        }
    }

    /**
     * @param $user_id
     * @throws \Doctrine\ORM\NonUniqueResultException
     */
    public function getLastAccess($user_id)
    {
        $query = $this->getEntityManager()
            ->createQuery(
                'SELECT T 
                    FROM App\Entity\UserManagement\Tracking T 
                    JOIN T.user u
                    WHERE u.id = :id
                    ORDER BY T.created DESC'
            )
            ->setParameter('id', $user_id)
            ->setMaxResults(1);
        try {
            $entity = $query->getOneOrNullResult();
        } catch (\Doctrine\ORM\NoResultException $e) {
            $entity = null;
        }
    }

    /**
     * @param $user
     * @param int $page
     * @param int $maxperpage
     * @return mixed|null
     */
    public function getByUser($user, $page = 1, $maxperpage = 3000)
    {
        $query = $this->getEntityManager()
            ->createQuery(
                'SELECT T FROM App\Entity\UserManagement\Tracking T JOIN T.user u WHERE u.id = :user AND T.ipRequest != :ipRequest ORDER BY T.created DESC'
            )
            ->setParameters(['user' => $user, 'ipRequest' => '127.0.0.1'])
            ->setFirstResult(($page - 1) * $maxperpage)
            ->setMaxResults($maxperpage);

        try {
            $entities = $query->getResult();
        } catch (\Doctrine\ORM\NoResultException $e) {
            $entities = null;
        }

        return $entities;
    }

    /**
     * @param $user
     * @return mixed
     * @throws \Doctrine\ORM\NonUniqueResultException
     */
    public function getTotalByUser($user)
    {
        $aResultTotal = $this->getEntityManager()
            ->createQuery('SELECT COUNT(T) FROM App\Entity\UserManagement\Tracking T JOIN T.user u WHERE u.id = :user ')
            ->setParameter('user', $user)
            ->setMaxResults(1)
            ->getSingleScalarResult();

        return $aResultTotal;
    }

    /**
     * @param int $page
     * @param int $maxperpage
     * @param $filter
     * @param $filter2
     * @return mixed|null
     */
    public function getFilterByPage($page = 1, $maxperpage = 8, $filter, $filter2)
    {
        $query = $this->getEntityManager()
            ->createQuery(
                'SELECT T FROM App\Entity\UserManagement\Tracking T WHERE T.pathInfo LIKE :filter AND T.queryRequest LIKE :filter2 ORDER BY T.created DESC'
            )
            ->setParameter('filter', "%{$filter}%")
            ->setParameter('filter2', "%{$filter2}%")
            ->setFirstResult(($page - 1) * $maxperpage)
            ->setMaxResults($maxperpage);

        try {
            $entities = $query->getResult();
        } catch (\Doctrine\ORM\NoResultException $e) {
            $entities = null;
        }

        return $entities;
    }
}
